FROM nvidia/cuda:8.0-cudnn5-runtime-ubuntu14.04

## Install Prompt Interaction Tool ##
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update && \
    apt-get install debconf-utils && \
    echo debconf shared/accepted-oracle-license-v1-1 select true | \
    debconf-set-selections && \
    echo debconf shared/accepted-oracle-license-v1-1 seen true | \
    debconf-set-selections

## Install OpenJDK-8 Dependencies ##
RUN apt-get update && \
    apt-get install -y -q -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" software-properties-common && \
    apt-get install -y -q -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" python-software-properties

## Silently install Java (open-jdk-8) ##
RUN apt-get update && \
    apt-get install -y -q -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" default-jdk
RUN apt-get update && \
    add-apt-repository ppa:webupd8team/java && \
    apt-get update && \
    apt-get install -y -q -o \
    Dpkg::Options::="--force-confdef" -o \
    Dpkg::Options::="--force-confold" \
    oracle-java8-installer && \
    echo javac --version
RUN apt install oracle-java8-set-default

## STEP 1. Install Tensorflow Package Dependencies ##
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        vim \
        curl \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        pciutils \
        build-essential \
        swig \
	python \
        python-numpy \
        python3-numpy \
        python-dev \
        python3-dev \
        python-pip \
        python3-pip \
        python-virtualenv \
        python-wheel \
        rsync \
        software-properties-common \
        unzip \
        libgtk2.0-0 \
        git \
	tcl-dev \
	tk-dev \
        && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/

## STEP 1A. Verify Nvidia installed ##
RUN lspci | grep -i nvidia

## STEP 1B. Install Linux Headers for Nvidia ##
#RUN apt-get update && \
#    apt-get upgrade-dist -o \
#    Dpkg::Options::="--force-confdef" -o \
#    Dpkg::Options::="--force-confold" \
RUN sh -c "apt-get update && \
        apt-get install -y -q -o \
        Dpkg::Options::='--force-confdef' -o \
        Dpkg::Options::='--force-confold' \
    linux-headers-$(uname -r)"

## STEP 1C. Verify CUDA 8.0 Installation ##
RUN cuda-install-samples-8.0.sh .
RUN cat /proc/driver/nvidia/version
RUN nvcc -V

## STEP 1D. Verify/Install NVIDIA cuDNN  ##

## STEP 1E. Install Anaconda ##
ADD https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh \
    tmp/Miniconda3-4.2.12-Linux-x86_64.sh
RUN bash tmp/Miniconda3-4.2.12-Linux-x86_64.sh -b
ENV PATH=$PATH:/root/miniconda3/bin/


COPY environment-gpu.yml  ./environment.yml
RUN conda env create -f=environment.yml --name sdc-gpu --debug -v

## Clean up tarballs and downloaded package files from installation ##
RUN conda clean -tp -y

## Set up Jupyter Notebook config. ##
COPY docker_files/jupyter_notebook_config.py /root/.jupyter/

# SDC-GPU Work Directory ##
RUN mkdir /src
WORKDIR "/src"

## Make sure CUDNN is detected Symlink (Using cuda-8.0 binaries) ##
ENV LD_LIBRARY_PATH /usr/local/cuda/lib64/:$LD_LIBRARY_PATH
RUN ln -s /usr/local/cuda-8.0/lib64/libcudnn.so.5 /usr/local/cuda-8.0/lib64/libcudnn.so

## Copy CUDA libraries from source container ##
COPY /usr/local/cuda/ /usr/local/cuda/
COPY /usr/local/cuda-8.0/ /usr/local/cuda-8.0/

# Install Tensorflow GPU 1.0 and test
RUN pip3 install --upgrade pip && \
pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.0.0-cp35-cp35m-linux_x86_64.whl
RUN nvidia-docker-plugin run -l 2222 --rm tensorflow/tensorflow:latest-gpu python -c 'import tensorflow as tf ; print tf.__version__'
RUN time python3 -m tensorflow.models.image.mnist.convolutional

# TensorBoard
EXPOSE 6006
# Jupyter
EXPOSE 5000-10000
# Flask Server
EXPOSE 4567

## Two Birds, One Stone Implementation ##
# 1. sources conda environment
# 2. prevents the zombie container issue when started as pid 1
COPY docker_files/run.sh /

## Run Entrypoint Script ##
RUN chmod +x /run.sh
ENTRYPOINT ["/run.sh"]
