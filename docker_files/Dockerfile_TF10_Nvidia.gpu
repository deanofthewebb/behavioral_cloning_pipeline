FROM nvidia/cuda:8.0-cudnn5-runtime-ubuntu14.04

## PART 1. Install Tensorflow Dependencies ##
## SDC-GPU Working Directory ##
RUN mkdir /src
WORKDIR "/src"

## Install Prompt Interaction Tool ##
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update && \
    apt-get install debconf-utils && \
    echo debconf shared/accepted-oracle-license-v1-1 select true | \
    debconf-set-selections && \
    echo debconf shared/accepted-oracle-license-v1-1 seen true | \
    debconf-set-selections

## Install OpenJDK-8 Dependencies ##
RUN apt-get update && \
    apt-get install -y -q -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" software-properties-common && \
    apt-get install -y -q -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" python-software-properties

## Silently install Java (open-jdk-8) ##
RUN apt-get update && \
    apt-get install -y -q -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" default-jdk
RUN apt-get update && \
    add-apt-repository ppa:webupd8team/java && \
    apt-get update && \
    apt-get install -y -q -o \
    Dpkg::Options::="--force-confdef" -o \
    Dpkg::Options::="--force-confold" \
    oracle-java8-installer && \
    echo javac --version
RUN apt install oracle-java8-set-default

## Install APT-GET PACKAGES ##
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        vim \
        curl \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        pciutils \
        build-essential \
        swig \
	python \
        python-numpy \
        python3-numpy \
        python-dev \
        python3-dev \
        python-pip \
        python3-pip \
        python-virtualenv \
        python-wheel \
        rsync \
        software-properties-common \
        unzip \
        libgtk2.0-0 \
        git \
	tcl-dev \
	tk-dev \
        && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/

## STEP 1A. Verify Nvidia installed ##
RUN lspci | grep -i nvidia

## STEP 1B. Install Linux Headers for Nvidia ##
RUN sh -c "apt-get update && \
        apt-get install -y -q -o \
        Dpkg::Options::='--force-confdef' -o \
        Dpkg::Options::='--force-confold' \
    linux-headers-$(uname -r)"

## STEP 1C. Install Anaconda ##
RUN mkdir tmp/ && \
    curl -o tmp/Miniconda3-4.2.12-Linux-x86_64.sh \
    https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh && \
    bash tmp/Miniconda3-4.2.12-Linux-x86_64.sh -b
#ENV PATH=$PATH:/root/miniconda3/bin/ "/root/miniconda3/bin${PATH:+:${PATH}}"
ENV PATH="/root/miniconda3/bin${PATH:+:${PATH}}"


COPY environment-gpu.yml  ./environment.yml
RUN conda env create -f=environment.yml --name sdc-gpu --debug -v && \
    conda clean -tp -y

## Set up Jupyter Notebook config. ##
COPY docker_files/jupyter_notebook_config.py /root/.jupyter/

## PART 2. Install Tensorflow 1.0 - GPU 1.0 from Source ##

## STEP 2A. Install EXTRA NVIDIA CUDA DRIVERS FOR GPU ##
RUN mkdir -p tmp/cuda-repo && \
    curl -o tmp/cuda-repo/cuda-repo-ubuntu1404-8-0-local-ga2_8.0.61-1_amd64.deb \
    https://s3-us-west-1.amazonaws.com/sdc-gpu/cuda-repo-ubuntu1404-8-0-local-ga2_8.0.61-1_amd64.deb && \
    dpkg -i tmp/cuda-repo/cuda-repo-ubuntu1404-8-0-local-ga2_8.0.61-1_amd64.deb && \
    apt-get update && \
    apt-get install -y -q -o \
    Dpkg::Options::="--force-confdef" -o \
    Dpkg::Options::="--force-confold" \
    cuda && \
    apt-get install -y -q -o \
    Dpkg::Options::="--force-confdef" -o \
    Dpkg::Options::="--force-confold" \
    cuda-drivers

## STEP 2B. Make sure CUDNN is detected via Symlink ##
ENV LD_LIBRARY_PATH="/usr/local/cuda-8.0/lib64\
${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
RUN ln -s /usr/local/cuda-8.0/lib64/libcudnn.so.5 /usr/local/cuda-8.0/lib64/libcudnn.so

## STEP 2C. Setup CUDA 8.0 Environment Variables ##
ENV PATH="/usr/local/cuda-8.0/bin${PATH:+:${PATH}}"

## STEP 2D. Verify CUDA Installation Version (8.0) ##
RUN cat /proc/driver/nvidia/version
RUN nvcc -V

## Test CUDA 8.0 - 'Samples' Script ##
RUN sh -c "cuda-install-samples-8.0.sh tmp/cuda-repo/"

## STEP 2E. Verify/Install NVIDIA cuDNN  ##
STEP 2. Install NVIDIA cuDNN
RUN mkdir -p tmp/cuDNN && \
    curl -o tmp/cuDNN/cudnn-8.0-linux-x64-v5.1.tgz \
    https://s3-us-west-1.amazonaws.com/sdc-gpu/cudnn-8.0-linux-x64-v5.1.tgz && \
    tar -xvf tmp/cuDNN/cudnn-8.0-linux-x64-v5.1-rc.tgz -C /usr/local/cuda-8.0/ && \
    cp -P /usr/local/cuda/include/cudnn.h /usr/local/cuda-8.0/include/ && \
    cp -P /usr/local/cuda/lib64/libcudnn* /usr/local/cuda-8.0/lib64/ && \
    chmod a+r /usr/local/cuda-8.0/include/cudnn.h /usr/local/cuda-8.0/lib64/libcudnn*

## STEP 2F. Install NVIDIA CUDA Profile Tools Interface ##
RUN apt-get update && \
    apt-get install -y -q -o \
    Dpkg::Options::="--force-confdef" -o \
    Dpkg::Options::="--force-confold" \
    libcupti-dev

## STEP 3. Install Tensorflow - PIP INSTALLATION ##
RUN pip3 install --upgrade pip && \
    pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/\
    tensorflow_gpu-1.0.0-cp35-cp35m-linux_x86_64.whl && \
    nvidia-docker-plugin run -l 2222 --rm tensorflow/tensorflow:latest-gpu python -c \
    'import tensorflow as tf ; print tf.__version__'
RUN time python3 -m tensorflow.models.image.mnist.convolutional


# TensorBoard
EXPOSE 6006
# Jupyter
EXPOSE 5000-10000
# Flask Server
EXPOSE 4567

## Two Birds, One Stone Implementation ##
# 1. sources conda environment #
# 2. prevents the zombie container issue when started as pid 1 #
COPY docker_files/run.sh /

## Run Entrypoint Script ##
RUN chmod +x /run.sh
ENTRYPOINT ["/run.sh"]
